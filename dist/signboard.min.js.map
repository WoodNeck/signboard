{"version":3,"file":"signboard.min.js","sources":["../src/core/SignBoardError.ts","../src/const/vertex.ts","../src/const/error.ts","../src/const/event.ts","../src/const/options.ts","../src/utils.ts","../src/core/Renderer.ts","../src/texture/ImageTexture.ts","../src/texture/VideoTexture.ts","../src/texture/TextTexture.ts","../src/core/TextureLoader.ts","../src/SignBoard.ts","../src/index.umd.ts"],"sourcesContent":["/**\n * Special type of known error that {@link SignBoard} throws.\n * @property {number} code Error code\n * @property {string} message Error message\n * @see {@link ERROR_CODE ERROR_CODE}\n */\nclass SignBoardError extends Error {\n  public readonly code: number;\n\n  /**\n   * @param message Error message\n   * @param code Error code\n   */\n  constructor(message: string, code: number) {\n    super(`(signboard.js) ${message}`);\n    Object.setPrototypeOf(this, SignBoardError.prototype);\n    this.name = \"SignBoardError\";\n    this.code = code;\n  }\n}\n\nexport default SignBoardError;\n","export const POSITION = new Float32Array([\n  -1, -1,\n  1, -1,\n  -1, 1,\n  -1, 1,\n  1, -1,\n  1, 1\n]);\n\nexport const TEX_COORD = new Float32Array([\n  0, 1,\n  1, 1,\n  0, 0,\n  0, 0,\n  1, 1,\n  1, 0\n]);\n","/**\n * Error codes of {@link SignBoardError}\n * @name ERROR_CODE\n * @constant\n * @type {object}\n * @property {number} WRONG_TYPE 0\n * @property {number} WRONG_OPTION 1\n * @property {number} ELEMENT_NOT_FOUND 2\n * @property {number} CANVAS_NOT_FOUND 3\n * @property {number} WEBGL_NOT_SUPPORTED 4\n * @property {number} FAILED_COMPILE_SHADER 5\n * @property {number} FAILED_COMPILE_PROGRAM 6\n * @property {number} FAILED_TO_LOAD_IMAGE 7\n * @property {number} TEXTURE_NOT_INITIALIZED 8\n */\nexport const CODE: {\n  [key in keyof typeof MESSAGE]: number;\n} = {\n  WRONG_TYPE: 0,\n  WRONG_OPTION: 1,\n  ELEMENT_NOT_FOUND: 2,\n  ELEMENT_NOT_CANVAS: 3,\n  WEBGL_NOT_SUPPORTED: 4,\n  FAILED_COMPILE_SHADER: 5,\n  FAILED_COMPILE_PROGRAM: 6,\n  FAILED_TO_LOAD_IMAGE: 7,\n  TEXTURE_NOT_INITIALIZED: 8\n};\n\nexport const MESSAGE = {\n  WRONG_TYPE: (val: any, types: string[]) => `${val}(${typeof val}) is not a ${types.map(type => `\"${type}\"`).join(\" or \")}.`,\n  WRONG_OPTION: (val: any, optionName: string, possible: any[]) => `Given value(${val}, ${typeof val}) can't be used for option \"${optionName}\". Possible values are: ${possible.join(\", \")}`,\n  ELEMENT_NOT_FOUND: (query: string) => `Element with selector \"${query}\" not found.`,\n  ELEMENT_NOT_CANVAS: (el: HTMLElement) => `Given element <${el.tagName}> is not a canvas.`,\n  WEBGL_NOT_SUPPORTED: (msg: string) => `WebGL context creation failed with the following error - \"${msg}\"`,\n  FAILED_COMPILE_SHADER: (msg: string | null) => `Failed compiling shader - \"${msg}\"`,\n  FAILED_COMPILE_PROGRAM: (msg: string | null) => `Failed compiling WebGL program - \"${msg}\"`,\n  FAILED_TO_LOAD_IMAGE: (src: string) => `Failed to load image with src - \"${src}\"`,\n  TEXTURE_NOT_INITIALIZED: \"Texture is not initialized yet\"\n};\n","export const BROWSER = {\n  WEBGL_CONTEXT_CREATION_ERROR: \"webglcontextcreationerror\",\n  LOAD: \"load\",\n  ERROR: \"error\",\n  RESIZE: \"resize\",\n  READY_STATE_CHANGE: \"readystatechange\",\n  CAN_PLAY_THROUGH: \"canplaythrough\",\n  LOADED_DATA: \"loadeddata\"\n};\n","/**\n * A constant for the {@link SignBoard#contentType contentType} option\n * @type {object}\n * @property {string} IMAGE \"image\"\n * @property {string} VIDEO \"video\"\n * @property {string} TEXT \"text\"\n * @example\n * ```ts\n * import { CONTENT_TYPE } from \"signboard\";\n * ```\n */\nexport const CONTENT_TYPE = {\n  IMAGE: \"image\",\n  VIDEO: \"video\",\n  TEXT: \"text\"\n} as const;\n\n/**\n * A constant for the {@link SignBoard#objectFit objectFit} option\n * @type {object}\n * @property {string} FILL \"fill\"\n * @property {string} CONTAIN \"contain\"\n * @property {string} COVER \"cover\"\n * @property {string} NONE \"none\"\n * @property {string} SCALE_DOWN \"scale-down\"\n * @example\n * ```ts\n * import { OBJECT_FIT } from \"signboard\";\n * ```\n */\nexport const OBJECT_FIT = {\n  FILL: \"fill\",\n  CONTAIN: \"contain\",\n  COVER: \"cover\",\n  NONE: \"none\",\n  SCALE_DOWN: \"scale-down\"\n} as const;\n","import SignBoardError from \"./core/SignBoardError\";\nimport * as EVENT from \"./const/event\";\nimport * as ERROR from \"./const/error\";\nimport { Merged, ValueOf } from \"./types\";\nimport { CONTENT_TYPE, OBJECT_FIT } from \"./const/options\";\n\nexport function getElement(el: HTMLElement | string | null): HTMLElement | null {\n  let targetEl: HTMLElement | null = null;\n\n  if (typeof el === \"string\") {\n    const queryResult = document.querySelector(el);\n    if (!queryResult) {\n      throw new SignBoardError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  return targetEl;\n}\n\nexport const getCanvas = (el: HTMLElement | string): HTMLCanvasElement => {\n  const targetEl = getElement(el);\n\n  if (!targetEl) {\n    throw new SignBoardError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  if (!/^canvas$/i.test(targetEl.tagName)) {\n    throw new SignBoardError(ERROR.MESSAGE.ELEMENT_NOT_CANVAS(targetEl), ERROR.CODE.ELEMENT_NOT_CANVAS);\n  }\n\n  return targetEl as HTMLCanvasElement;\n}\n\nexport const getWebGLContext = (canvas: HTMLCanvasElement): WebGLRenderingContext => {\n  let context: WebGLRenderingContext | null = null;\n  let reason: string = \"\";\n  const contextAttributes: WebGLContextAttributes = {};\n\n  const onWebGLContextCreationError = (e: Event) => {\n    reason = (e as WebGLContextEvent).statusMessage || \"Unknown Error\";\n  }\n\n  canvas.addEventListener(EVENT.BROWSER.WEBGL_CONTEXT_CREATION_ERROR, onWebGLContextCreationError);\n  context = canvas.getContext(\"webgl\", contextAttributes) || canvas.getContext(\"experimental-webgl\") as WebGLRenderingContext;\n  canvas.removeEventListener(EVENT.BROWSER.WEBGL_CONTEXT_CREATION_ERROR, onWebGLContextCreationError);\n\n  if (!context) throw new SignBoardError(ERROR.MESSAGE.WEBGL_NOT_SUPPORTED(reason), ERROR.CODE.WEBGL_NOT_SUPPORTED);\n\n  canvas.addEventListener(\"webglcontextlost\", e => {\n    e.preventDefault();\n  }, false);\n\n  return context;\n}\n\nexport const merge = <From extends {[key: string]: any}, To extends {[key: string]: any}>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      (target as any)[key] = source[key];\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getSubImage = (\n  contentSize: { width: number; height: number },\n  renderingSize: { width: number; height: number },\n  objectFit: ValueOf<typeof OBJECT_FIT>,\n  contentType: ValueOf<typeof CONTENT_TYPE>\n): { x: number; y: number; width: number; height: number } => {\n  switch (objectFit) {\n    case OBJECT_FIT.FILL: {\n      return { x: 0, y: 0, ...renderingSize }\n    }\n    case OBJECT_FIT.CONTAIN: {\n      const xScale = renderingSize.width / contentSize.width;\n      const yScale = renderingSize.height / contentSize.height;\n\n      if (xScale >= yScale) {\n        const newWidth = contentSize.width * yScale\n        return { x: (renderingSize.width - newWidth) / 2, y: 0, width: newWidth, height: renderingSize.height };\n      } else {\n        const newHeight = contentSize.height * xScale;\n        return { x: 0, y: (renderingSize.height - newHeight) / 2, width: renderingSize.width, height: newHeight };\n      }\n    }\n    case OBJECT_FIT.COVER: {\n      const xScale = renderingSize.width / contentSize.width;\n      const yScale = renderingSize.height / contentSize.height;\n\n      if (xScale >= yScale) {\n        const newHeight = contentSize.height * xScale;\n        return { x: 0, y: (renderingSize.height - newHeight) / 2, width: renderingSize.width, height: newHeight };\n      } else {\n        const newWidth = contentSize.width * yScale\n        const xOffset = contentType === CONTENT_TYPE.TEXT\n          ? 0\n          : (renderingSize.width - newWidth) / 2;\n\n        return { x: xOffset, y: 0, width: newWidth, height: renderingSize.height };\n      }\n    }\n    case OBJECT_FIT.NONE: {\n      return { x: (renderingSize.width - contentSize.width) / 2, y: (renderingSize.height - contentSize.height) / 2, ...contentSize };\n    }\n    case OBJECT_FIT.SCALE_DOWN: {\n      if (contentSize.width > renderingSize.width || contentSize.height > renderingSize.height) {\n        return getSubImage(contentSize, renderingSize, OBJECT_FIT.CONTAIN, contentType);\n      } else {\n        return getSubImage(contentSize, renderingSize, OBJECT_FIT.NONE, contentType);\n      }\n    }\n    default:\n      throw new SignBoardError(\n        ERROR.MESSAGE.WRONG_OPTION(objectFit, \"objectFit\", Object.keys(OBJECT_FIT).map(key => OBJECT_FIT[key as keyof typeof OBJECT_FIT])),\n        ERROR.CODE.WRONG_OPTION\n      )\n  }\n}\n\nexport const parsePadding = (padding: number | number[]) => {\n  if (!Array.isArray(padding)) {\n    return [padding, padding, padding, padding];\n  } else if (padding.length === 2) {\n    return [padding[0], padding[1], padding[0], padding[1]];\n  } else if (padding.length === 4) {\n    return padding;\n  } else {\n    throw new SignBoardError(\n      ERROR.MESSAGE.WRONG_OPTION(padding, \"textPadding\", [\"number\", \"[number, number]\", \"[number, number, number, number]\"]),\n      ERROR.CODE.WRONG_OPTION\n    )\n  }\n}\n","import SignBoardError from \"./SignBoardError\";\nimport SignBoard from \"../SignBoard\";\nimport Texture from \"../texture/Texture\";\nimport signboardVS from \"../shader/signboard.vert\";\nimport signboardFS from \"../shader/signboard.frag\";\nimport * as VERTEX from \"../const/vertex\";\nimport * as ERROR from \"../const/error\";\nimport { getSubImage, getWebGLContext } from \"../utils\";\n\nclass Renderer {\n  private _signboard: SignBoard;\n  private _canvas: HTMLCanvasElement;\n  private _gl: WebGLRenderingContext;\n  private _program: WebGLProgram | null;\n  private _buffers: {\n    position: WebGLBuffer | null,\n    texcoord: WebGLBuffer | null\n  }\n  private _uniforms: {\n    uInvTileSize: WebGLUniformLocation | null,\n    uResolution: WebGLUniformLocation | null,\n    uEmission: WebGLUniformLocation | null,\n    uDissipation: WebGLUniformLocation | null,\n    uBulbSize: WebGLUniformLocation | null,\n    uTexOffset: WebGLUniformLocation | null,\n    uTexScale: WebGLUniformLocation | null,\n    uScrollOffset: WebGLUniformLocation | null\n  }\n  private _texture: Texture | null;\n  private _lastRenderTime: number;\n  private _animationID: number;\n  private _prevScroll: number;\n  private _contextLost: boolean;\n\n  public get animating() { return this._animationID >= 0; }\n\n  // Options\n  public get canvas() { return this._canvas; }\n  public get gl() { return this._gl; }\n\n  public constructor(canvas: HTMLCanvasElement, signboard: SignBoard) {\n    this._signboard = signboard;\n    this._canvas = canvas;\n    this._gl = getWebGLContext(canvas);\n    this._program = null;\n    this._texture = null;\n    this._lastRenderTime = -1;\n    this._animationID = -1;\n    this._prevScroll = 0;\n    this._buffers = {\n      position: null,\n      texcoord: null\n    }\n    this._uniforms = {\n      uInvTileSize: null,\n      uResolution: null,\n      uEmission: null,\n      uDissipation: null,\n      uBulbSize: null,\n      uTexOffset: null,\n      uTexScale: null,\n      uScrollOffset: null\n    };\n    this._contextLost = false;\n  }\n\n  public destroy() {\n    this.stop();\n\n    const gl = this._gl;\n    const texture = this._texture?.webGLTexture;\n\n    gl.deleteProgram(this._program);\n\n    gl.deleteBuffer(this._buffers.position);\n    gl.deleteBuffer(this._buffers.texcoord);\n\n    if (texture) {\n      gl.deleteTexture(texture);\n    }\n\n    gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n\n    this._texture = null;\n    this._contextLost = true;\n  }\n\n  public init() {\n    if (this._contextLost) return;\n\n    const gl = this._gl;\n    const program = this._createWebGLProgram();\n\n    this._program = program;\n\n    gl.useProgram(program);\n    this._bindAttributes(program);\n    this._bindUniforms(program);\n    this.updateUniforms();\n  }\n\n  public setTexture(texture: Texture) {\n    texture.init(this._gl);\n    this._texture = texture;\n    this.updateTextureOffset();\n  }\n\n  public resize() {\n    const canvas = this._canvas;\n\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n\n    this.updateUniforms();\n  }\n\n  /**\n   */\n  public start() {\n    this._animationID = requestAnimationFrame(this._onAnimationFrame);\n  }\n\n  /**\n   * Stop animation\n   */\n  public stop() {\n    cancelAnimationFrame(this._animationID);\n    this._animationID = -1;\n    this._lastRenderTime = -1;\n  }\n\n  /**\n   * Render a single frame\n   */\n  public render() {\n    const gl = this._gl;\n    const texture = this._texture;\n\n    if (!this._signboard.initialized) return;\n\n    if (!texture) {\n      throw new SignBoardError(ERROR.MESSAGE.TEXTURE_NOT_INITIALIZED, ERROR.CODE.TEXTURE_NOT_INITIALIZED);\n    }\n\n    texture.upload(this._gl);\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  public updateUniforms() {\n    const signboard = this._signboard;\n    const gl = this._gl;\n    const canvas = this._canvas;\n    const uniforms = this._uniforms;\n\n    if (!this._program) return;\n\n    gl.uniform1f(uniforms.uInvTileSize, 1 / signboard.tileSize);\n    gl.uniform2f(uniforms.uResolution, canvas.width, canvas.height);\n    gl.uniform1f(uniforms.uEmission, signboard.emission);\n    gl.uniform1f(uniforms.uDissipation, 1 / signboard.dissipation);\n    gl.uniform1f(uniforms.uBulbSize, signboard.bulbSize);\n\n    if (this._texture) {\n      this.updateTextureOffset();\n    }\n  }\n\n  public updateTextureOffset() {\n    const signboard = this._signboard;\n    const gl = this._gl;\n    const texture = this._texture;\n    const uniforms = this._uniforms;\n\n    if (!texture) {\n      throw new SignBoardError(ERROR.MESSAGE.TEXTURE_NOT_INITIALIZED, ERROR.CODE.TEXTURE_NOT_INITIALIZED);\n    }\n\n    const renderingSize = { width: gl.drawingBufferWidth, height: gl.drawingBufferHeight };\n    const subImage = getSubImage(texture.size, renderingSize, signboard.objectFit, signboard.contentType);\n\n    gl.uniform2f(uniforms.uTexOffset, subImage.x / renderingSize.width, subImage.y / renderingSize.height);\n    gl.uniform2f(uniforms.uTexScale, renderingSize.width / subImage.width, renderingSize.height / subImage.height);\n  }\n\n  private _onAnimationFrame = (time: number) => {\n    const signboard = this._signboard;\n    const lastTime = this._lastRenderTime;\n    const delta = time - lastTime;\n    const updateInterval = 1000 / signboard.frameRate;\n\n    if (delta >= updateInterval || lastTime < 0) {\n      this._increaseScrollOffset();\n      this.render();\n      this._lastRenderTime = lastTime + updateInterval;\n    }\n\n    this._animationID = requestAnimationFrame(this._onAnimationFrame);\n  }\n\n  private _compileShader(src: string, type: WebGLRenderingContextBase[\"VERTEX_SHADER\"] | WebGLRenderingContextBase[\"FRAGMENT_SHADER\"]) {\n    const gl = this._gl;\n    const shader = gl.createShader(type);\n\n    if (!shader) {\n      throw new SignBoardError(ERROR.MESSAGE.FAILED_COMPILE_SHADER(`Unexpected Error: ${gl.getError()}`), ERROR.CODE.FAILED_COMPILE_SHADER);\n    }\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      throw new SignBoardError(ERROR.MESSAGE.FAILED_COMPILE_SHADER(gl.getShaderInfoLog(shader)), ERROR.CODE.FAILED_COMPILE_SHADER);\n    }\n\n    return shader;\n  }\n\n  private _createWebGLProgram() {\n    const gl = this._gl;\n\n    const program = gl.createProgram()!;\n    const vs = this._compileShader(signboardVS, gl.VERTEX_SHADER);\n    const fs = this._compileShader(signboardFS, gl.FRAGMENT_SHADER);\n\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter( program, gl.LINK_STATUS)) {\n      throw new SignBoardError(ERROR.MESSAGE.FAILED_COMPILE_PROGRAM(gl.getProgramInfoLog(program)), ERROR.CODE.FAILED_COMPILE_PROGRAM);\n    }\n\n    return program;\n  }\n\n  private _bindAttributes(program: WebGLProgram) {\n    const gl = this._gl;\n    const positionLocation = gl.getAttribLocation(program, \"aPosition\");\n    const texcoordLocation = gl.getAttribLocation(program, \"aTexCoord\");\n\n    const positionBuffer = gl.createBuffer();\n    const texcoordBuffer = gl.createBuffer();\n\n    this._buffers.position = positionBuffer;\n    this._buffers.texcoord = texcoordBuffer;\n\n    gl.enableVertexAttribArray(positionLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, VERTEX.POSITION, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    gl.enableVertexAttribArray(texcoordLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, VERTEX.TEX_COORD, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n  }\n\n  private _bindUniforms(program: WebGLProgram) {\n    const gl = this._gl;\n    const uniforms = this._uniforms;\n\n    for (const key in uniforms) {\n      uniforms[key as keyof typeof uniforms] = gl.getUniformLocation(program, key);\n    }\n  }\n\n  private _increaseScrollOffset() {\n    const signboard = this._signboard;\n    const gl = this._gl;\n    const texture = this._texture;\n    const uniforms = this._uniforms;\n    const scrollSpeed = signboard.scrollSpeed;\n\n    if (scrollSpeed === 0) return;\n\n    if (!texture) {\n      throw new SignBoardError(ERROR.MESSAGE.TEXTURE_NOT_INITIALIZED, ERROR.CODE.TEXTURE_NOT_INITIALIZED);\n    }\n\n    const prevVal = this._prevScroll;\n    const newVal = prevVal + scrollSpeed * (1000 / signboard.frameRate) / gl.drawingBufferWidth;\n\n    this._prevScroll = newVal;\n\n    gl.uniform1f(uniforms.uScrollOffset, newVal);\n  }\n}\n\nexport default Renderer;\n","import Texture from \"./Texture\";\n\nclass ImageTexture implements Texture {\n  private _image: HTMLImageElement;\n  private _texture: WebGLTexture | null;\n\n  public get webGLTexture() { return this._texture; }\n  public get size() { return {\n    width: this._image.naturalWidth,\n    height: this._image.naturalHeight\n  }}\n\n  public constructor(image: HTMLImageElement) {\n    this._image = image;\n    this._texture = null;\n  }\n\n  public init(gl: WebGLRenderingContext) {\n    this._texture = gl.createTexture();\n  }\n\n  public upload(gl: WebGLRenderingContext) {\n    gl.bindTexture(gl.TEXTURE_2D, this._texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._image);\n  }\n\n  public update(src?: string) {\n    if (!src) return;\n\n    this._image.src = src;\n  }\n}\n\nexport default ImageTexture;\n","import Texture from \"./Texture\";\n\nclass VideoTexture implements Texture {\n  private _video: HTMLVideoElement;\n  private _texture: WebGLTexture | null;\n\n  public get webGLTexture() { return this._texture; }\n  public get size() { return {\n    width: this._video.videoWidth,\n    height: this._video.videoHeight\n  }}\n\n  public constructor(video: HTMLVideoElement) {\n    this._video = video;\n    this._texture = null;\n  }\n\n  public init(gl: WebGLRenderingContext) {\n    this._texture = gl.createTexture();\n    this._video.play();\n  }\n\n  public upload(gl: WebGLRenderingContext) {\n    gl.bindTexture(gl.TEXTURE_2D, this._texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._video);\n  }\n\n  public update(src?: string) {\n    if (!src) return;\n\n    const video = this._video;\n\n    video.src = src;\n    video.play();\n  }\n}\n\nexport default VideoTexture;\n","import SignBoard, { SignBoardOptions } from \"../SignBoard\";\nimport { parsePadding } from \"../utils\";\nimport Texture from \"./Texture\";\n\nclass TextTexture implements Texture {\n  private _signboard: SignBoard;\n  private _canvas: HTMLCanvasElement;\n  private _context: CanvasRenderingContext2D;\n  private _texture: WebGLTexture | null;\n\n  public get webGLTexture() { return this._texture; }\n  public get size() { return {\n    width: this._canvas.width,\n    height: this._canvas.height\n  }}\n\n  public constructor(signboard: SignBoard) {\n    this._signboard = signboard;\n    this._canvas = document.createElement(\"canvas\");\n    this._context = this._canvas.getContext(\"2d\")!;\n    this._texture = null;\n  }\n\n  public init(gl: WebGLRenderingContext) {\n    const signboard = this._signboard;\n    const text = signboard.src;\n\n    this._texture = gl.createTexture();\n\n    this._drawText(text);\n  }\n\n  public update(src?: string) {\n    const canvas = this._canvas;\n\n    this._context.clearRect(0, 0, canvas.width, canvas.height);\n    this._drawText(src ?? this._signboard.src);\n  }\n\n  public upload(gl: WebGLRenderingContext) {\n    gl.bindTexture(gl.TEXTURE_2D, this._texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._canvas);\n  }\n\n  private _drawText(text: string) {\n    const canvas = this._canvas;\n    const context = this._context;\n    const signboard = this._signboard;\n    const options = this._getDrawingOptions();\n\n    for (const key in options) {\n      (context as any)[key] = (options as any)[key];\n    }\n\n    const textPadding = parsePadding(signboard.textPadding);\n    const textSize = context.measureText(text);\n\n    canvas.width = textSize.actualBoundingBoxRight - textSize.actualBoundingBoxLeft\n      + textPadding[1] + textPadding[3];\n    canvas.height = (textSize.actualBoundingBoxDescent - textSize.actualBoundingBoxAscent)\n      + textPadding[0] + textPadding[2];\n\n    for (const key in options) {\n      (context as any)[key] = (options as any)[key];\n    }\n\n    context.fillText(text, textPadding[3], textPadding[0]);\n  }\n\n  private _getDrawingOptions() {\n    const signboard = this._signboard;\n\n    return {\n      font: \"32pt serif\",\n      textAlign: \"left\",\n      fillStyle: \"red\",\n      textBaseline: \"top\",\n      ...signboard.textOptions\n    } as Required<SignBoardOptions[\"textOptions\"]>;\n  }\n}\n\nexport default TextTexture;\n","import SignBoardError from \"./SignBoardError\";\nimport SignBoard from \"../SignBoard\";\nimport * as ERROR from \"../const/error\";\nimport { BROWSER } from \"../const/event\";\nimport { CONTENT_TYPE } from \"../const/external\";\nimport Texture from \"../texture/Texture\";\nimport ImageTexture from \"../texture/ImageTexture\";\nimport VideoTexture from \"../texture/VideoTexture\";\nimport TextTexture from \"../texture/TextTexture\";\nimport { Attributes } from \"../types\";\n\nclass TextureLoader {\n  private _signboard: SignBoard;\n\n  public constructor(signboard: SignBoard) {\n    this._signboard = signboard;\n  }\n\n  public async load(): Promise<Texture> {\n    const type = this._signboard.contentType;\n\n    switch (type) {\n      case CONTENT_TYPE.IMAGE:\n        return this._loadImage();\n      case CONTENT_TYPE.VIDEO:\n        return this._loadVideo();\n      case CONTENT_TYPE.TEXT:\n        return new TextTexture(this._signboard);\n      default:\n        throw new SignBoardError(\n          ERROR.MESSAGE.WRONG_OPTION(type, \"contentType\", Object.keys(CONTENT_TYPE).map(key => CONTENT_TYPE[key as keyof typeof CONTENT_TYPE])),\n          ERROR.CODE.WRONG_OPTION\n        )\n    }\n  }\n\n  private async _loadImage(): Promise<ImageTexture> {\n    const signboard = this._signboard;\n    const image = new Image();\n    const src = signboard.src;\n\n    return new Promise((resolve, reject) => {\n      image.addEventListener(BROWSER.LOAD, () => {\n        resolve(new ImageTexture(image));\n      });\n      image.addEventListener(BROWSER.ERROR, () => {\n        reject(new SignBoardError(ERROR.MESSAGE.FAILED_TO_LOAD_IMAGE(src), ERROR.CODE.FAILED_TO_LOAD_IMAGE));\n      });\n\n      const attribs = {\n        crossOrigin: \"anonymous\",\n        ...signboard.contentAttribs\n      } as Attributes<HTMLImageElement>;\n\n      for (const key in attribs) {\n        image[key] = attribs[key];\n      }\n\n      image.src = src;\n    });\n  }\n\n  private async _loadVideo(): Promise<VideoTexture> {\n    const signboard = this._signboard;\n    const video = document.createElement(\"video\");\n    const src = signboard.src;\n\n    return new Promise((resolve, reject) => {\n      video.addEventListener(BROWSER.LOADED_DATA, () => {\n        resolve(new VideoTexture(video));\n      });\n      video.addEventListener(BROWSER.ERROR, () => {\n        reject(new SignBoardError(ERROR.MESSAGE.FAILED_TO_LOAD_IMAGE(src), ERROR.CODE.FAILED_TO_LOAD_IMAGE));\n      });\n\n      const attribs = {\n        loop: true,\n        playsInline: true,\n        autoplay: true,\n        muted: true,\n        crossOrigin: \"anonymous\",\n        ...signboard.contentAttribs\n      } as Attributes<HTMLVideoElement>;\n\n      for (const key in attribs) {\n        video[key] = attribs[key];\n      }\n\n      video.src = src;\n    });\n  }\n}\n\nexport default TextureLoader;\n","import SignBoardError from \"./core/SignBoardError\";\nimport Renderer from \"./core/Renderer\";\nimport TextureLoader from \"./core/TextureLoader\";\nimport { Texture } from \"./texture\";\nimport { BROWSER } from \"./const/event\";\nimport { getCanvas } from \"./utils\";\nimport * as ERROR from \"./const/error\";\nimport { CONTENT_TYPE, OBJECT_FIT } from \"./const/options\";\nimport { Attributes, ValueOf } from \"./types\";\n\n/**\n * @interface\n * @param {\"image\" | \"video\" | \"text\"} [contentType=\"image\"] A type of content\n * @param {object} [contentAttribs={}] Additional attributes for image / video element (if you need it)\n * @param {number} [frameRate=60] A number of rendering frames per second for video / text\n * @param {boolean} [autoResize=true] Enabling this option will make SignBoard to call `resize` whenever window's `resize` event is triggered\n * @param {boolean} [autoInit=true] If `false` is given, SignBoard will not automatically initialize immediately after creating instance\n * @param {number} [tileSize=8] A size of each tile blocks, in px\n * @param {number} [emission=1.5] LED light emission modifier, bigger the brighter. `emission: 1` will render the original color of the contents\n * @param {number} [dissipation=0.5] A value indicating how fast light fades out from the center of each tiles\n * @param {number} [bulbSize=0.7] A lightbulb's size inside each tiles\n * @param {string} [objectFit=\"fill\"] The object-fit CSS property sets how the content of a replaced element, such as an <img\\> or <video\\>, should be resized to fit its container.<br/>See https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit for details\n * @param {object} [textOptions={}] Canvas's 2D context attributes for customizing texts\n * @param {number | Array<number>} [textPadding=0] A padding values that will be used for rendering text\n * @param {number} [scrollSpeed=0] A horizontal scroll speed (right to left)\n * @param {boolean} [initOnFontLoad=false] A option that can be used when you're using a custom font that should be loaded before initializing.<br/>Enabling this option will make SignBoard to call `init` after when the font described in `textOptions.font` is loaded.\n */\nexport interface SignBoardOptions {\n  contentType: ValueOf<typeof CONTENT_TYPE>;\n  contentAttribs: Partial<Attributes<HTMLImageElement> | Attributes<HTMLMediaElement>>;\n  frameRate: number;\n  autoResize: boolean;\n  autoInit: boolean;\n  tileSize: number;\n  emission: number;\n  dissipation: number;\n  bulbSize: number;\n  objectFit: ValueOf<typeof OBJECT_FIT>;\n  textOptions: Partial<Attributes<CanvasRenderingContext2D>>;\n  textPadding: number | number[];\n  scrollSpeed: number;\n  initOnFontLoad: boolean | [boolean, string];\n}\n\n/**\n * WebGL-based LED SignBoard effect for image / video / text\n */\nclass SignBoard {\n  private _renderer: Renderer;\n  private _texture: Texture | null;\n  private _src: string;\n  private _initialized: boolean;\n\n  // Options\n  private _contentType: SignBoardOptions[\"contentType\"];\n  private _contentAttribs: SignBoardOptions[\"contentAttribs\"];\n  private _autoResize: boolean;\n  private _autoInit: boolean;\n  private _frameRate: number;\n  private _tileSize: number;\n  private _emission: number;\n  private _dissipation: number;\n  private _bulbSize: number;\n  private _objectFit: ValueOf<typeof OBJECT_FIT>;\n  private _initOnFontLoad: SignBoardOptions[\"initOnFontLoad\"];\n  private _textOptions: SignBoardOptions[\"textOptions\"];\n  private _textPadding: SignBoardOptions[\"textPadding\"];\n  private _scrollSpeed: number;\n\n  public get renderer() { return this._renderer; }\n  /**\n   * Current src of the image/video, or text string when the `contentType` is \"text\"\n   * @type {string}\n   * @readonly\n   */\n  public get src() { return this._src; }\n  /**\n   * Whether the {@link SignBoard#init} is called\n   * @type {boolean}\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  public get texture() { return this._texture; }\n\n  // Options\n  /**\n   * Current value of the `contentType` option\n   * @see {@link SignBoardOptions}\n   */\n  public get contentType() { return this._contentType; }\n  public set contentType(val: SignBoardOptions[\"contentType\"]) { this._contentType = val; }\n  /**\n   * Current value of the `contentAttribs` option\n   * @see {@link SignBoardOptions}\n   */\n  public get contentAttribs() { return this._contentAttribs; }\n  public set contentAttribs(val: SignBoardOptions[\"contentAttribs\"]) { this._contentAttribs = val; }\n  /**\n   * Current value of the `autoResize` option\n   * @see {@link SignBoardOptions}\n   */\n  public get autoResize() { return this._autoResize; }\n  public set autoResize(val: boolean) { this._updateAutoResize(val); }\n  /**\n   * Current value of the `autoInit` option\n   * @see {@link SignBoardOptions}\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Current value of the `frameRate` option\n   * @see {@link SignBoardOptions}\n   */\n  public get frameRate() { return this._frameRate; }\n  public set frameRate(val: number) { this._frameRate = val; }\n  /**\n   * Current value of the `tileSize` option\n   * @see {@link SignBoardOptions}\n   */\n  public get tileSize() { return this._tileSize; }\n  public set tileSize(val: number) {\n    this._tileSize = val;\n    this._renderer.updateUniforms();\n    this._renderer.render();\n  }\n  /**\n   * Current value of the `emission` option\n   * @see {@link SignBoardOptions}\n   */\n  public get emission() { return this._emission; }\n  public set emission(val: number) {\n    this._emission = val;\n    this._renderer.updateUniforms();\n    this._renderer.render();\n  }\n  /**\n   * Current value of the `dissipation` option\n   * @see {@link SignBoardOptions}\n   */\n  public get dissipation() { return this._dissipation; }\n  public set dissipation(val: number) {\n    this._dissipation = val;\n    this._renderer.updateUniforms();\n    this._renderer.render();\n  }\n  /**\n   * Current value of the `bulbSize` option\n   * @see {@link SignBoardOptions}\n   */\n  public get bulbSize() { return this._bulbSize; }\n  public set bulbSize(val: number) {\n    this._bulbSize = val;\n    this._renderer.updateUniforms();\n    this._renderer.render();\n  }\n  /**\n   * Current value of the `objectFit` option\n   * @see {@link SignBoardOptions}\n   */\n  public get objectFit() { return this._objectFit; }\n  public set objectFit(val: SignBoardOptions[\"objectFit\"]) {\n    this._objectFit = val;\n    this._renderer.updateTextureOffset();\n    this._renderer.render();\n  }\n  /**\n   * Current value of the `textOptions` option\n   * @see {@link SignBoardOptions}\n   */\n  public get textOptions() { return this._textOptions; }\n  public set textOptions(val: SignBoardOptions[\"textOptions\"]) {\n    this._textOptions = val;\n    this.update();\n  }\n  /**\n   * Current value of the `textPadding` option\n   * @see {@link SignBoardOptions}\n   */\n  public get textPadding() { return this._textPadding; }\n  public set textPadding(val: SignBoardOptions[\"textPadding\"]) {\n    this._textPadding = val;\n    this.update();\n  }\n  /**\n   * Current value of the `scrollSpeed` option\n   * @see {@link SignBoardOptions}\n   */\n  public get scrollSpeed() { return this._scrollSpeed; }\n  public set scrollSpeed(val: SignBoardOptions[\"scrollSpeed\"]) { this._scrollSpeed = val; }\n  /**\n   * Current value of the `initOnFontLoad` option\n   * @see {@link SignBoardOptions}\n   * @readonly\n   */\n  public get initOnFontLoad() { return this._initOnFontLoad; }\n\n  /**\n   * @param {string|HTMLElement} canvas CSS query selector or canvas element\n   * @param {string} src Source URL to the image / video\n   * @param {SignBoardOptions} options An options object\n   */\n  public constructor(canvas: string | HTMLElement, src: string, {\n    contentType = CONTENT_TYPE.IMAGE,\n    contentAttribs = {},\n    autoResize = true,\n    autoInit = true,\n    frameRate = 60,\n    tileSize = 8,\n    emission = 1.5,\n    dissipation = 0.5,\n    bulbSize = 0.7,\n    objectFit = OBJECT_FIT.FILL,\n    textOptions = {},\n    textPadding = 0,\n    scrollSpeed = 0,\n    initOnFontLoad = false\n  }: Partial<SignBoardOptions> = {}) {\n    // Core components\n    this._renderer = new Renderer(getCanvas(canvas), this);\n    this._src = src;\n    this._texture = null;\n\n    // Internal States\n    this._initialized = false;\n\n    // Bind options\n    this._contentType = contentType;\n    this._contentAttribs = contentAttribs;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._frameRate = frameRate;\n    this._tileSize = tileSize;\n    this._emission = emission;\n    this._dissipation = dissipation;\n    this._bulbSize = bulbSize;\n    this._objectFit = objectFit;\n    this._textOptions = textOptions;\n    this._textPadding = textPadding;\n    this._scrollSpeed = scrollSpeed;\n    this._initOnFontLoad = initOnFontLoad;\n\n    this.resize = this.resize.bind(this);\n\n    const shouldCheckFontLoad = Array.isArray(initOnFontLoad)\n      ? initOnFontLoad[0]\n      : initOnFontLoad;\n\n    if (autoInit && !shouldCheckFontLoad) {\n      this.init();\n    }\n\n    if (shouldCheckFontLoad) {\n      this._checkFontLoad();\n    }\n  }\n\n  /**\n   * Destroy the current instance, and release all resources\n   * @returns {void}\n   */\n  public destroy() {\n    this._renderer.destroy();\n    this._updateAutoResize(false);\n    this._initialized = false;\n  }\n\n  /**\n   * Initialize SignBoard\n   * @returns {Promise<SignBoard>} The current instance\n   */\n  public async init(): Promise<this> {\n    const renderer = this._renderer;\n    const textureLoader = new TextureLoader(this);\n\n    const texture = await textureLoader.load();\n    this._texture = texture;\n\n    renderer.resize();\n    renderer.init();\n    renderer.setTexture(texture);\n\n    if (this._autoResize) {\n      this._autoResize = false;\n      this._updateAutoResize(true);\n    }\n\n    this._initialized = true;\n    this.start();\n\n    return this;\n  }\n\n  /**\n   * Resize SignBoard with the latest size of the canvas\n   * @returns {SignBoard} The current instance\n   */\n  public resize(): this {\n    const renderer = this._renderer;\n\n    renderer.resize();\n    renderer.render();\n\n    return this;\n  }\n\n  /**\n   * Start rendering\n   * @returns {SignBoard} The current instance\n   */\n  public start(): this {\n    const renderer = this._renderer;\n\n    if (this._contentType === CONTENT_TYPE.VIDEO || this._scrollSpeed !== 0) {\n      renderer.start();\n    } else {\n      // Render single frame\n      renderer.render();\n    }\n\n    return this;\n  }\n\n  /**\n   * Stop rendering\n   * @returns {SignBoard} The current instance\n   */\n  public stop(): this {\n    this._renderer.stop();\n    return this;\n  }\n\n  /**\n   * Update the texture\n   * @param {string?} src New src to the image/video or text string if `contentType` is \"text\"\n   * @returns {SignBoard} The current instance\n   */\n  public update(src?: string): this {\n    const texture = this._texture;\n\n    if (!texture) throw new SignBoardError(ERROR.MESSAGE.TEXTURE_NOT_INITIALIZED, ERROR.CODE.TEXTURE_NOT_INITIALIZED);\n\n    texture.update(src);\n    this._renderer.updateUniforms();\n\n    return this;\n  }\n\n  private _updateAutoResize(newVal: boolean) {\n    const prevVal = this._autoResize;\n\n    if (prevVal === newVal) return;\n\n    if (newVal) {\n      window.addEventListener(BROWSER.RESIZE, this.resize);\n    } else {\n      window.removeEventListener(BROWSER.RESIZE, this.resize);\n    }\n\n    this._autoResize = newVal;\n  }\n\n  private _checkFontLoad() {\n    const font = this._textOptions.font;\n    if (!font || document.fonts.check(font)) {\n      this.init();\n      return;\n    }\n\n    const initOnFontLoad = this._initOnFontLoad;\n    const textToCheck = Array.isArray(initOnFontLoad)\n      ? initOnFontLoad[1]\n      : \"a\";\n\n    document.fonts.load(font, textToCheck).then(() => {\n      this.init();\n    });\n  }\n}\n\nexport default SignBoard;\n","import SignBoard from './SignBoard';\n\nimport * as Core from \"./core\";\nimport * as Texture from \"./texture\";\nimport * as Constants from \"./const/external\";\nimport { merge } from \"./utils\";\n\nmerge(SignBoard, Core);\nmerge(SignBoard, Texture);\nmerge(SignBoard, Constants);\n\nexport default SignBoard;\n"],"names":["message","code","_super","Object","setPrototypeOf","_this","SignBoardError","prototype","name","__extends","Error","POSITION","Float32Array","TEX_COORD","CODE","WRONG_TYPE","WRONG_OPTION","ELEMENT_NOT_FOUND","ELEMENT_NOT_CANVAS","WEBGL_NOT_SUPPORTED","FAILED_COMPILE_SHADER","FAILED_COMPILE_PROGRAM","FAILED_TO_LOAD_IMAGE","TEXTURE_NOT_INITIALIZED","MESSAGE","val","types","map","type","join","optionName","possible","query","el","tagName","msg","src","BROWSER","CONTENT_TYPE","IMAGE","VIDEO","TEXT","OBJECT_FIT","FILL","CONTAIN","COVER","NONE","SCALE_DOWN","getCanvas","targetEl","queryResult","document","querySelector","ERROR","nodeType","Node","ELEMENT_NODE","getElement","test","getWebGLContext","canvas","onWebGLContextCreationError","e","reason","statusMessage","context","addEventListener","EVENT","getContext","removeEventListener","preventDefault","merge","target","_i","sources","forEach","source","keys","key","getSubImage","contentSize","renderingSize","objectFit","contentType","x","y","xScale","width","yScale","height","newWidth","newHeight","signboard","time","_signboard","lastTime","_lastRenderTime","updateInterval","frameRate","_increaseScrollOffset","render","_animationID","requestAnimationFrame","_onAnimationFrame","_canvas","_gl","_program","_texture","_prevScroll","_buffers","position","texcoord","_uniforms","uInvTileSize","uResolution","uEmission","uDissipation","uBulbSize","uTexOffset","uTexScale","uScrollOffset","_contextLost","this","stop","gl","texture","webGLTexture","deleteProgram","deleteBuffer","deleteTexture","getExtension","loseContext","program","_createWebGLProgram","useProgram","_bindAttributes","_bindUniforms","updateUniforms","init","updateTextureOffset","clientWidth","clientHeight","cancelAnimationFrame","initialized","upload","viewport","drawingBufferWidth","drawingBufferHeight","clear","COLOR_BUFFER_BIT","drawArrays","TRIANGLES","bindTexture","TEXTURE_2D","uniforms","uniform1f","tileSize","uniform2f","emission","dissipation","bulbSize","subImage","size","shader","createShader","getError","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","vs","_compileShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","positionLocation","getAttribLocation","texcoordLocation","positionBuffer","createBuffer","texcoordBuffer","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","bufferData","VERTEX","STATIC_DRAW","vertexAttribPointer","FLOAT","getUniformLocation","scrollSpeed","newVal","image","_image","naturalWidth","naturalHeight","createTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","video","_video","videoWidth","videoHeight","play","createElement","_context","text","_drawText","clearRect","options","_getDrawingOptions","textPadding","padding","Array","isArray","length","parsePadding","textSize","measureText","actualBoundingBoxRight","actualBoundingBoxLeft","actualBoundingBoxDescent","actualBoundingBoxAscent","fillText","__assign","font","textAlign","fillStyle","textBaseline","textOptions","Promise","_loadImage","_loadVideo","TextTexture","Image","resolve","reject","ImageTexture","attribs","crossOrigin","contentAttribs","VideoTexture","loop","playsInline","autoplay","muted","_a","_b","_c","_d","_e","autoResize","_f","autoInit","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","initOnFontLoad","_renderer","Renderer","_src","_initialized","_contentType","_contentAttribs","_autoResize","_autoInit","_frameRate","_tileSize","_emission","_dissipation","_bulbSize","_objectFit","_textOptions","_textPadding","_scrollSpeed","_initOnFontLoad","resize","bind","shouldCheckFontLoad","_checkFontLoad","_updateAutoResize","update","destroy","renderer","TextureLoader","load","setTexture","start","window","textToCheck","fonts","check","then","SignBoard","Texture","Constants"],"mappings":"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"}